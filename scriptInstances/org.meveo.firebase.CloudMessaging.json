{
  "code" : "org.meveo.firebase.CloudMessaging",
  "description" : "Send notification and register users",
  "inputs" : [ {
    "name" : "userId",
    "type" : "String"
  }, {
    "name" : "title",
    "type" : "String"
  }, {
    "name" : "body",
    "type" : "String"
  } ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.firebase;\r\n\r\nimport java.util.Map;\r\nimport java.time.OffsetDateTime;\r\nimport java.time.Instant;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport com.google.gson.*;\r\n\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.customEntities.FCMToken;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.credentials.CredentialHelperService;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\n\r\npublic class CloudMessaging extends Script {\r\n\r\n\tprivate static final Logger log = LoggerFactory.getLogger(CloudMessaging.class);\r\n\tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\tprivate RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n\tprivate Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n\tstatic final private String FCM_DOMAIN = \"fcm.googleapis.com\";\r\n\r\n\tprivate String userId;\r\n\tprivate String title;\r\n\tprivate String body;\r\n\r\n\tpublic void setUserId(String userId){\r\n\t\tthis.userId = userId;\r\n\t}\r\n\r\n\tpublic void setTitle(String title){\r\n\t\tthis.title = title;\r\n\t}\r\n\t\r\n\tpublic void setBody(String body){\r\n\t\tthis.body = body;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t\tCredential credential = CredentialHelperService.getCredential(FCM_DOMAIN, crossStorageApi, defaultRepo);\r\n\t\tif (credential == null) {\r\n\t\t\tthrow new BusinessException(\"No credential found for \" + FCM_DOMAIN);\r\n\t\t} else {\r\n\t\t\tlog.info(\"using credential {} with username {}\", credential.getUuid(), credential.getUsername());\r\n\t\t}\r\n\t\tFCMToken token = null;\r\n\t\ttry{ \r\n\t\t\ttoken = crossStorageApi.find(defaultRepo,FCMToken.class).by(\"userId\",userId).getResult();\r\n\t\t} catch (Exception e){\r\n\t\t\tthrow new BusinessException(\"TOKEN_NOT_FOUND\");\r\n\t\t}\r\n\t\tClient client = ClientBuilder.newClient();\r\n\t\tclient.register(new CredentialHelperService.LoggingFilter());\r\n\t\tWebTarget target = client.target(\"https://fcm.googleapis.com/fcm/send\");\r\n\t\tString reqBody = \"{\\n\"\r\n\t\t+\"\\\"to\\\": \\\"\"+token.getToken()+\"\\\",\\n\"\r\n\t\t+\"\\\"title\\\": \\\"\"+title+\"\\\",\\n\"\r\n\t\t+\"\\\"body\\\": \\\"\"+body+\"\\\"\\n\"\r\n\t\t+\"}\";\r\n\t\tResponse response = CredentialHelperService.setCredential(target.request(), credential).post(Entity.json(reqBody));\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\" + value);\r\n\t}\r\n\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "org.meveo.credentials.CredentialHelperService",
    "description" : "Helper function to build request with credentials",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package org.meveo.credentials;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport javax.ws.rs.client.*;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport org.meveo.model.customEntities.Credential;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.elresolver.ValueExpressionWrapper;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.xml.bind.DatatypeConverter;\r\n\r\n\r\npublic class CredentialHelperService extends Script {\r\n  \r\n  private static final Logger log = LoggerFactory.getLogger(CredentialHelperService.class);\r\n\r\n    public static class LoggingFilter implements ClientRequestFilter {\r\n        @Override\r\n        public void filter(ClientRequestContext requestContext) throws IOException {\r\n            if(requestContext!=null){\r\n              if(requestContext.getEntity()!=null){\r\n                log.info(requestContext.getEntity().toString());\r\n              } else {\r\n                log.info(\"uri:{}\",requestContext.getUri());\r\n              }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static Credential getCredential(String domain,CrossStorageApi crossStorageApiInstance,Repository repo){\r\n      List<Credential> matchigCredentials = crossStorageApiInstance.find(repo, Credential.class)\r\n                .by(\"domainName\", domain)\r\n\t\t\t\t.getResults();\r\n      if(matchigCredentials.size()>0){\r\n        return matchigCredentials.get(0);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    public static Invocation.Builder setCredential(Invocation.Builder invocBuilder,Credential credential) throws BusinessException {\r\n      Invocation.Builder result=invocBuilder;\r\n      if(\"BASIC_HTTP\".equals(credential.getAuthenticationType())){\r\n        try{\r\n          String token = credential.getUsername() + \":\" + credential.getPassword();\r\n          String headerValue = \"BASIC \" + DatatypeConverter.printBase64Binary(token.getBytes(\"UTF-8\"));\r\n          result=invocBuilder.header(\"Authorization\", headerValue);} \r\n        catch (Exception ex) {\r\n            throw new BusinessException(\"Cannot encode with UTF-8\", ex);\r\n        }\r\n      } else if(\"HEADER\".equals(credential.getAuthenticationType())){\r\n        String headerKey = credential.getHeaderKey();\r\n        String headerValue = credential.getHeaderValue();\r\n        try{\r\n          if(headerKey.contains(\"#{\")){\r\n            headerKey=ValueExpressionWrapper.evaluateToStringMultiVariable(headerKey,\"entity\",credential);\r\n          }\r\n          if(headerValue.contains(\"#{\")){\r\n            headerValue=ValueExpressionWrapper.evaluateToStringMultiVariable(headerValue,\"entity\",credential);\r\n          }\r\n          result=invocBuilder.header(headerKey, headerValue);\r\n        } catch(Exception e) {\r\n          throw new BusinessException(e);\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n    }\r\n\t\r\n}",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}